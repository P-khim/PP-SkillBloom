// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role{
  user 
  admin
}

enum Status{
  pending
  approved
  rejected
}

enum DeleteStatus {
  none        // means no deletion requested
  requested   // user/admin requested deletion
  deleted     // gig has been deleted (if using soft delete)
}

enum OrderStatus {
  ONGOING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PAID
  UNPAID
}

model User {
  id Int        @id @default(autoincrement())
  email String  @unique
  password String 
  isSocialLogin Boolean? @default(false)
  username String? @unique
  fullName String?
  description String?
  profileImage String?
  isProfileInfoSet Boolean? @default(false)
  createdAt DateTime @default(now())
  birthday         DateTime?
  city             String?
  country          String?   @default("Cambodia")
  facebookLink     String?
  gender           String?
  languages        String[]
  professions      String[]
  telegramLink     String?
  role Role @default(user)
  gigs Gigs[]
  orders Orders[]
  reviews Reviews[]
  messagesSent Message[] @relation("sentMessages")
  messagesReceived Message[] @relation("receivedMessages")
}

model Gigs {
  id Int @id @default(autoincrement())
  title String 
  description String
  category String
  deliveryTime Int
  revisions Int
  features String[]
  price Int
  shortDesc String
  createdAt DateTime @default(now())
  images String[]
  createdBy User @relation(fields: [userId], references: [id])
  userId Int
  orders Orders[]
  reviews Reviews[]

  isApproved Boolean @default(false)
  approvalStatus Status @default(pending)
   
  isDeletePending Boolean @default(false)
  deleteStatus DeleteStatus @default(none)
}


model Orders {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  buyer User @relation(fields: [buyerId],references: [id])
  buyerId Int
  paymentIntent String @unique
  isCompleted Boolean @default(false)
  gig Gigs @relation(fields:[gigId],references: [id], onDelete: Cascade)
  gigId Int
  price Int
  messages Message[]

  status OrderStatus @default(ONGOING)
  buyerAgreed Boolean @default(false)
  sellerAgreed Boolean @default(false)

  buyerAgreedAt DateTime?
  sellerAgreedAt DateTime?
  completedAt DateTime?
  cancelReason String?

  qrImage String?
  payment PaymentStatus @default(UNPAID)
}

model Reviews {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  rating Int
  reviewText String?
  gig Gigs @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId Int
  reviewer User @relation(fields: [reviewerId], references: [id])
  reviewerId Int

  @@map("Review")
}

model Message {
  id Int @id @default(autoincrement())
  text String
  createdAt DateTime @default(now())
  isRead Boolean @default(false)
  sender User @relation("sentMessages", fields: [senderId], references: [id])
  senderId Int
  recipient User @relation("receivedMessages", fields: [recipientId], references: [id])
  recipientId Int
  order Orders @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int
}